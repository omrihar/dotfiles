snippet emb "Embed into IPython" b
import IPython; IPython.embed()
endsnippet

snippet log "Create a nice logger" b
logging.basicConfig(level=logging.INFO,
					format="%(asctime)s - %(levelname)s - %(message)s",
					datefmt="%H:%M:%S")
logger = logging.getLogger('${1:my_logger}')
$0
endsnippet

snippet exit "Exit at this point" b
import sys; sys.exit(0)
endsnippet

snippet notify "Call me from my wanderings" b
import subprocess; subprocess.call(['notify-send', '${1:Hello there!}']);
endsnippet

snippet sc "Schema field for mongothon" b
'$1': {'type': ${2:basestring}, 'required': ${3:True}},$0
endsnippet
	
snippet opt "Optional with default None"
Optional[$1] = None$0
endsnippet

snippet trns "Translation hybrid"
${1:field}_tr = Column(MutableDict.as_mutable(JSONB))
$1 = translation_hybrid($1_tr)
$0
endsnippet
	
snippet col "SQLAlchemy Column" 
${1:field} = Column(${2:String}, nullable=${3:True})
$0
endsnippet

snippet api "Api endpoint boilerplate code"
# Standard Library
import logging
from typing import List

# FastAPI
from fastapi import APIRouter, Depends, HTTPException

# SQLAlchemy
from sqlalchemy.orm import Session

# CNHI App
from app import crud

logger = logging.getLogger(__name__)

router = APIRouter()
$0
endsnippet
